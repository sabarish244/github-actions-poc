@model QipPortal.Models.PowerBi.EmbedConfig

@*@if (@ViewBag.menuItem != null)
{
@section NavSidebar{
    <partial name="_Sidebar" model="@ViewBag.menuItem" />
}
}*@

@*@section UserOptions{
    <partial name="_UserOptions" model="@ViewBag.ProjectCount" />
}*@



<script src="https://npmcdn.com/es6-promise@3.2.1"></script>
<script src="~/js/powerbi.js"></script> 

<script>

    function ResetFilter() {
        $.ajax({
            type: "GET",
            url: "/Reports/ResetFilter",
            contentType: "text/xml; charset=utf-8",
            success: function (result) {
                location.reload();
            },

        });
    }

</script>
<script>

    /* Global variables. */
    // Set to true during a print operation to stop a second one
    var g_printInProgress = false;

    /* Displays a server side error message to the user.
     * exportData [in] Data object returned by the server with the error message inside.
     */
    function DisplayError(exportData) {
        // Display the error to the user
        alert(exportData.errorMessage);

        // Hide the progress message
        $('#ProgressMessage').hide();

        // Re-enable the print button
        g_printInProgress = false;
    }

    /* This function downloads the report from the server once the export
     * has been completed.
     * Params:
     * exportId          [in] The Id generated by the server during the StartExport call.
     * printStrategyName [in] The name of the print strategy (PDF, PPT etc).
     * reportId          [in] The Id of the report being printed.
     */
    function DownloadPrintedReport(exportId, printStrategyName, reportId) {
        // Download the report
        window.location.href = "/Reports/DownloadPrintedReport?exportId=" + exportId + "&printStrategyName=" + printStrategyName + "&reportId=" + reportId;

        // Hide the progress message
        $('#ProgressMessage').hide();

        // Re-enable the button
        g_printInProgress = false;
    }

    /* Obtain the report Id from the URL.
     * Returns - The report Id.
     */
    function GetReportId() {
        // Get the URL which contains the report Id
        var url = window.location.href;
        url = url.split("?");
        // Get the location of the report Id
        var idLocation = url[0].lastIndexOf("/");


        // Extract the Id
        return url[0].substring((idLocation + 1));
    }

    /* Called when the progress timer ticks to check on the progress
     * of the PowerBI export operation.
     * Params:
     * exportId          [in] The Id generated by the server during the StartExport call.
     * printStrategyName [in] The name of the print strategy (PDF, PPT etc).
     * reportId          [in] The Id of the report being printed.
     */
    function OnPrintProgressTimerTicked(exportId, printStrategyName, reportId) {
       // debugger;
        // Create a new request to read progress
        var req2 = new XMLHttpRequest();
        var url = "/Reports/GetPrintProgress?exportId=" + exportId + "&reportId=" + reportId;
        req2.open('GET', url);
        req2.onreadystatechange = function () {

            //4 = complete
            if (req2.readyState == 4) {

                // Parse the response into JSON
                var data = JSON.parse(this.responseText);

                // If there is an error then report it back
                if (data.errorMessage != null) {
                    DisplayError(data);
                }

                else {
                    // Update the progress message
                    var message = "Printing in progress: " + data.percentComplete + "%";
                    SetProgressText(message);

                    // If we are at 100% then download the file
                    if (data.percentComplete == "100") {
                        // Change the progress message
                        SetProgressText("Printing completed");

                        // Download the file
                        DownloadPrintedReport(exportId, printStrategyName, reportId);
                    }
                    else {
                        // Restart the timer
                        window.setTimeout(OnPrintProgressTimerTicked, 3000, data.exportId, printStrategyName, reportId);
                    }
                }
            }
        };

        req2.send();
    }

    /* This function updates the text in the progress bar.
     * Params:
     * text [in] The text to set.
     */
    function SetProgressText(text) {
        // Get the element
        var progressBar = document.getElementById("ProgressMessage");

        // Set the text
        progressBar.innerText = text;
    }

    /* This function captures the current state of the PowerBI report as a bookmark and
     * calls the StartPrint function.
     * Params:
     * printStrategyName [in] The name of the print strategy (PDF, PPT etc).
     */
    function CaptureState(printStrategyName) {
        report.bookmarksManager.capture()
            .then(function (capturedBookmark) {
                var state = capturedBookmark.state;
                // Kick off the print operation
                StartPrint(printStrategyName, state);
            })
            .catch(function (error) {
                alert("Error capturing current state, failed to start export: " + error);
            });
    }

    /* This function starts the export of a PowerBI report, this will cause an export
     * Id to be returned by the server which will be used in calls to check the
     * progress of the export.
     * Params:
     * printStrategyName [in] The name of the print strategy (PDF, PPT etc).
     * state [in] The current bookmark state
     */
    function StartPrint(printStrategyName, state) {
        // Get the report Id
        //var reportId = GetReportId();
        var reportId = $('#ReportID').val();
        var intReportId = parseInt(reportId, 10);
        // Format the request URL with the print strategy name
        //var url = "/Reports/StartPrint?printStrategyName=" + printStrategyName + "&reportId=" + reportId + "&state=" + state;
        // Format the request URL
        var url = "/Reports/StartPrint"

        // Format the parameters to send in request body
        var params = {
            "printStrategyName": printStrategyName,
            "reportId": intReportId,
            "reportState": state,
        }
        // Format the request
        var req = new XMLHttpRequest();
        req.open('POST', url, true);
        //req.contentType = "application/json";
        req.setRequestHeader("Content-Type", "application/json");

        // This function hides the progress message whenver the operation completes
        req.onreadystatechange = function () {

            //4 = complete
            if (this.readyState == 4) {

                // Parse the response into JSON
                var data = JSON.parse(this.responseText);

                // If there is an error then report it back
                if (data.errorMessage != null) {
                    DisplayError(data);
                }

                else {
                    // The export Id is in the result
                    var exportId = data.exportId;

                    // Start the progress timer passing in the export Id
                    window.setTimeout(OnPrintProgressTimerTicked, 3000, exportId, printStrategyName, reportId);

                    // Display a progress message
                    SetProgressText("Printing Started ...");

                    // Disable the print button
                    g_printInProgress = true;
                }
            }
        };

        // Send the request
        req.send(JSON.stringify(params));

        // Display the progress message
        $('#ProgressMessage').show();
    }

    //This script is to get all the strategies from Reports Controller and pass the type of strategy selected
    $(document).ready(function () {
        var itemList;
        $.ajax({

            /* This call sets up a menu populated by the GetPrintStrategies call
             * and is attahced using the selector below.
             */
            type: "GET",
            url: "/Reports/GetPrintStrategies",
            contentType: "application/json",
            success: function (result) {

                itemList = result;

                // Display a context menu
                $.contextMenu({
                    selector: '#ReportPrint',
                    trigger: 'left',

                    /* This callback function is executed whenever one of the menu optiokns
                     * is pressed.
                     */
                    callback: function (key, options) {

                        // Only print if there isn't an operation in progress
                        if (g_printInProgress) {
                            alert("A print operation is already in progress.");
                        }

                        else {
                            // Capture current state and then kick off the print operation
                            CaptureState(key);
                        }

                    },

                    items: itemList
                });

            },

            error: function () {
                alert("Error in Print");
            }
        });
    });

</script>


<script>
    // Read embed application token from Model
    var accessToken = "@Model.EmbedToken.Token";

    // Read embed URL from Model
    var embedUrl = "@Html.Raw(Model.EmbedUrl)";

    // Read report Id from Model
    var embedReportId = "@Model.Id";

    // Get models. models contains enums that can be used.
    var models = window['powerbi-client'].models;

    // Embed configuration used to describe the what and how to embed.
    // This object is used when calling powerbi.embed.
    // This also includes settings and options such as filters.
    // You can find more information at https://github.com/Microsoft/PowerBI-JavaScript/wiki/Embed-Configuration-Details.
    var config = {
        type: 'report',
        tokenType: models.TokenType.Embed,
        accessToken: accessToken,
        embedUrl: embedUrl,
        id: embedReportId,
        permissions: models.Permissions.All,
        settings: {
            filterPaneEnabled: true,
            navContentPaneEnabled: true,//,
            //background: models.BackgroundType.Transparent
            panes: {
                pageNavigation: {
                    visible: true,
                    position: models.PageNavigationPosition.Left,
                }
            }
        }
    };

    // Get a reference to the embedded report HTML element
    var reportContainer = $('#reportContainer')[0];

    if ("@Model.Username" != "") {
        $("#RLS").prop('checked', true);
        $("#RLSdiv").show();
    }
    else
    {
        $("#RLS").prop('checked', false);
        $("#RLSdiv").hide();
    }

    if ("@Model.IsEffectiveIdentityRequired.GetValueOrDefault()" == "True") {
        $("#noRLSdiv").hide();
        $("#RLS").removeAttr("disabled");
        $("#RLS").change(function () {
            if ($(this).is(":checked")) {
                $("#RLSdiv").show(300);
            } else {
                $("#RLSdiv").hide(200);
            }
        });
    }
    else
    {
        $("#noRLSdiv").show();
    }
    // Embed the report and display it within the div container.  inactive
        var report = powerbi.embed(reportContainer, config);
 
        function GetParameterValues(param) {
            try {
                var url = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
                for (var i = 0; i < url.length; i++) {
                    var urlparam = url[i].split('=');
                    if (urlparam[0] == param) {
                        return urlparam[1];
                    }
                }
            }
            catch (err) {
                alert(err)
            }
        }
</script>

<div id="reportContainerRow">
    <div class="d-flex justify-content-between powerBIReportId">
        <div style="font-size: 21px;font-style: italic;margin-inline-start: 30px;display: inline-flex;">
            <b><label style="color: #6946C6;" id="recnameID"></label></b>
            <!-- Display progress of the print operation. -->
            <div id="ProgressMessage" style="margin-left: 15em; display:none">Please wait ...</div>
            @if (@ViewBag.ResetButtonVisibility != null)
            {
                <div style="margin-left: 1em;">
                    <button class="btn btn-primary btn-sm btn-shadow @ViewBag.ResetButtonVisibility" id="ResetButton" onclick="Javascipt: ResetFilter();">RESET</button>
                </div>}
        </div>
        <div>
            <div class="d-flex align-items-center" style="text-align: right;margin-inline-start: 214px;">

                <!-- A button to print the current Power BI report -->
                @if (@ViewBag.PrintButtonVisibility != null)
                {
                    <a href="#" id="ReportPrint">
                        <img alt="printreports" id="ReportPrintImage" height="20" width="20" src="~/img/icons/printer_img.png" />
                    </a>}
                &nbsp;&nbsp;&nbsp;&nbsp;
            <div class="favorite">
                <button class="text-hide" id="lnkReportfav" onclick="addfavoritesfunction();">
                    fav button<svg width="27" height="25" class="addfavorites" id="favouriteID" viewBox="-1 0 33 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M26.8782 9.37643C26.5538 8.41701 25.6683 7.79708 24.6224 7.79708H17.8777L15.7537 1.5734C15.4272 0.61667 14.5436 0 13.5007 0C13.4974 0 13.494 -2.79495e-08 13.4907 5.08482e-05C12.4435 0.00401919 11.5603 0.628321 11.2406 1.59054L9.17853 7.79708H2.37762C1.32909 7.79708 0.442959 8.41909 0.120164 9.38167C-0.202685 10.3442 0.137827 11.3493 0.987684 11.942L6.49035 15.7798L4.37229 21.9862C4.04449 22.9467 4.37931 23.9532 5.22526 24.5502C5.65014 24.85 6.13781 25 6.6258 25C7.10936 24.9999 7.59319 24.8526 8.01595 24.5577L13.5282 20.7134L18.9749 24.5513C19.8199 25.1467 20.9142 25.1496 21.7627 24.5588C22.6112 23.9679 22.953 22.9649 22.6337 22.0034L20.5658 15.7798L26.0217 11.9354C26.8664 11.3403 27.2026 10.3358 26.8782 9.37643Z" fill="#6946C6" /></svg>
                </button>
            </div>
            </div>
        </div>
    </div>
    <div class="d-flex h-100">
        <div class="col-12 p-0" id="reportContainer"></div>
    </div>
 
</div>


